{"version":3,"sources":["components/ImageInput/index.jsx","components/CheckBox/index.jsx","components/MessageBox/index.jsx","components/XLSXInput/index.jsx","components/EditMessage/index.jsx","components/Header/index.jsx","components/SendMessages/index.jsx","components/SelectJobPage/index.jsx","components/UploadSpreadsheetPage/index.jsx","components/JobSettings/index.jsx","components/Webpage/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ImageInput","props","setImageURL","imageURL","className","for","type","value","onChange","event","target","CheckBox","label","setter","set","id","name","checked","MessageBox","limitLength","messageContents","maxLength","XLSXInput","accept","e","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_json","onerror","error","then","d","tempHolder","x","length","push","FirstName","LastName","PrimaryPhone","CellPhone","readExcel","files","EditMessage","longMessage","setMessageContents","setLongMessage","displayImageInput","setDisplayImageInput","useState","messageSaved","currentJob","JSON","parse","localStorage","getItem","keyName","selectedJob","isJobSelected","setIsJobSelected","refresh","setRefresh","useEffect","tempMessage","message","setTimeout","onClick","storedMessage","setItem","stringify","handleStoreInfo","Header","setDisplay","removeItem","SendMessages","list","setDisplayState","displayLoaded","setList","messageList","hasClicked","setHasClicked","sendingMessage","setSendingMessage","firstMessage","setFirstMessage","accountSid","authToken","qs","require","currentJobKey","jobSettings","messagingList","localPageState","setLocalPageState","tempMapper","setTempMapper","jobSelected","setJobSelected","tempList","assignedUsers","calculateSplits","users","group","start","end","sendMessage","a","console","log","PersonsList","axios","post","Body","MediaUrl","From","To","auth","username","password","res","catch","tempMessageList","pop","map","element","startEnd","slice","handlePartSelection","onKeyDown","SelectJobPage","availableJobs","displayErrorMessage","setDisplayErrorMessage","setSelectedJob","defaultValue","Jobs","index","jobName","UploadSpreadsheetPage","storedJobInfo","setStoredJobInfo","jobNameInput","setJobNameInput","displayAlertMessage","setDisplayAlertMessage","displayAlertMessage2","setDisplayAlertMessage2","currentJobList","messagesPerKeyPress","userList","handleUpload","JobSettings","inputs","setInputs","numUsers","setNumUsers","jobIsSelected","setJobIsSelected","setLoadedJobSettings","handleSave","MessagingSite","displayState","user","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReeactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3f68794.chunk.js","sourcesContent":["export const ImageInput = (props) => {\r\n    const {setImageURL, imageURL} = props;\r\n    return (\r\n        <div className = \"imageInput\">\r\n            <label for=\"file\">Chose image URL to upload: </label>\r\n            {/*<input type=\"file\" id=\"file\" name=\"file\" accept=\".png, .jpg, .jpeg\" />*/}\r\n            <input type=\"text\" value = {imageURL} onChange = {(event) => setImageURL(event.target.value)}/>\r\n        </div>\r\n    )\r\n}","export const CheckBox = (props) => {\r\n    const {label, setter, set} = props;\r\n    return (\r\n        <div className = \"CheckBox\">\r\n            <label for=\"checkbox\"> {label} </label>\r\n            {set? <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" onChange = {() => {setter(!set)}} checked/>\r\n            : <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" onChange = {() => {setter(!set)}} />\r\n            }\r\n        </div>\r\n    );\r\n}","export const MessageBox = (props) => {\r\n    const {limitLength, setter, messageContents} = props;\r\n    return (\r\n        <div className = \"MessageBox\">\r\n            <label for=\"message\"> Message: </label>\r\n            <input type=\"text\" value = {messageContents} id=\"message\" name=\"message\" maxLength = {!limitLength? \"160\": ''} onChange = {(event) => setter(event.target.value)}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nexport const XLSXInput = (props) => {\r\n\r\n  const {setter} = props;\r\n\r\n  const readExcel = (file) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = (e) => {\r\n        const bufferArray = e.target.result;\r\n\r\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n\r\n        const wsname = wb.SheetNames[0];\r\n\r\n        const ws = wb.Sheets[wsname];\r\n\r\n        const data = XLSX.utils.sheet_to_json(ws);\r\n\r\n        resolve(data);\r\n      };\r\n\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n\r\n    promise.then((d) => {\r\n      let tempHolder = [];\r\n      for (let x = 0; x < d.length; x++) {\r\n          tempHolder.push({\r\n              FirstName: d[x].FirstName,\r\n              LastName: d[x].LastName,\r\n              PrimaryPhone: d[x].CellPhone\r\n          })\r\n      }\r\n      setter(tempHolder);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n        onChange={(e) => {\r\n          const file = e.target.files[0];\r\n          readExcel(file);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}","import { MessageBox } from \"../MessageBox\"\r\nimport { CheckBox } from \"../CheckBox\"\r\nimport { ImageInput } from \"../ImageInput\"\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const EditMessage = (props) => {\r\n    const {longMessage, setMessageContents, setLongMessage, displayImageInput, setImageURL, imageURL, setDisplayImageInput, messageContents} = props;\r\n    const [messageSaved, setMessageSaved] = useState(0);\r\n    const currentJob = JSON.parse(localStorage.getItem('currentJob'));\r\n    const keyName = 'message'+currentJob?.selectedJob;\r\n    const [isJobSelected, setIsJobSelected] = useState(true);\r\n    const [refresh, setRefresh] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (currentJob === null || currentJob === '') {\r\n            // No job is selected, alert user that nothing is being edited\r\n            setIsJobSelected(false);\r\n        } else {\r\n            // Job is selected, see if info can be pulled\r\n            const tempMessage = JSON.parse(localStorage.getItem(keyName));\r\n            if (tempMessage !== null && tempMessage !== '') {\r\n                // Message existed: fill blanks accordingly\r\n                setMessageContents(tempMessage.message);\r\n                if (tempMessage.imageURL !== '') {\r\n                    setImageURL(tempMessage.imageURL);\r\n                }\r\n                setRefresh(1);\r\n                setTimeout(() => setRefresh(0), 1);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    // const handleStoreInfo = () => {\r\n    //     let tempURL = imageURL;\r\n    //     setDisplayLoaded(false);\r\n    //     handleSplit();\r\n    //     let tempList = {\r\n    //         user: user,\r\n    //         imageURL: tempURL,\r\n    //         message: messageContents,\r\n    //         PersonsList: messageList\r\n    //     }\r\n    //     setList(tempList);\r\n    // }\r\n\r\n    const handleStoreInfo = () => {\r\n        let storedMessage = {\r\n            message: messageContents,\r\n            imageURL: ''\r\n        }\r\n\r\n        if (imageURL !== null && imageURL !== '') {\r\n            storedMessage.imageURL = imageURL;\r\n        }\r\n\r\n        localStorage.setItem(keyName, JSON.stringify(storedMessage));\r\n    }\r\n\r\n    return (\r\n        refresh === 0\r\n        ? <div className = \"page\">\r\n                {isJobSelected\r\n                ? <div className = \"MessageInputs\">\r\n                <MessageBox limitLength = {longMessage} setter={setMessageContents} messageContents={messageContents}/>\r\n                <CheckBox label=\"Message &gt; 160 characters\" setter={setLongMessage} set={longMessage}/>\r\n                { displayImageInput? <ImageInput setImageURL = {setImageURL} imageURL = {imageURL}/>: <div />}\r\n                <CheckBox label=\"Send Image\" setter={setDisplayImageInput} set={displayImageInput}/>\r\n                <button onClick={() => handleStoreInfo()}> Save </button>\r\n                {messageSaved === 1?<h3> Message Saved</h3>\r\n                : <div />\r\n                }\r\n                </div>\r\n                : <h3> No Job is Selected</h3>\r\n                }\r\n            </div>\r\n        : <div />\r\n    )\r\n}","import './index.scss';\r\n\r\nexport const Header = (props) => {\r\n    const {name, setDisplay} = props;\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('progchamp');\r\n        setDisplay(1);\r\n    }\r\n\r\n    return (\r\n        <div className = \"HeaderBar\">\r\n            <div className = \"selectable\">\r\n                <button onClick = {() => {setDisplay(5)}}> \r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Select Job</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(2)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Edit Message</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(6)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Upload Spreadsheet</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => setDisplay(3)}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Send Messages</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(7)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Job Settings</h3>\r\n                    </div>\r\n                </button>\r\n                <button>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Manage Users</h3>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n            <button onClick = {() => handleLogout()}>\r\n                <div className = \"buttonBackground\">\r\n                    <h3>{name}</h3>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const SendMessages = (props) => {\r\n\r\n    const {list, displayLoaded, setDisplayState, messageList, setList} = props;\r\n    const [hasClicked, setHasClicked] = useState(0);\r\n    const [sendingMessage, setSendingMessage] = useState(false);\r\n    const emptyString = '';\r\n    const [firstMessage, setFirstMessage] = useState(true);\r\n    const [previousKey, setPreviousKey] = useState('');\r\n    const accountSid = \"AC328815b6f17c750d80bedcc36bb5f3ce\"; // Primary Account\r\n    // const accountSid = \"ACf0660d83b54452dd82af793988b69485\"; // Testing account\r\n    const authToken = \"90924da28b6854a695c34a12bac34e5a\"; // Primary Account\r\n    // const authToken = \"bf5cc12a2c492f49030aae72ef397e45\"; // Testing account\r\n    var qs = require('qs');\r\n    const twilio = require('twilio');\r\n    const client = new twilio(accountSid, authToken);\r\n    const currentJobKey = JSON.parse(localStorage.getItem('currentJob'))\r\n    let jobSettings = '';\r\n    let message = '';\r\n    let messagingList = '';\r\n    if (currentJobKey !== null && currentJobKey !== '') {\r\n        jobSettings = JSON.parse(localStorage.getItem(\"settings\"+currentJobKey.selectedJob));\r\n        message = JSON.parse(localStorage.getItem(\"message\"+currentJobKey.selectedJob));\r\n        messagingList = JSON.parse(localStorage.getItem(currentJobKey.selectedJob));\r\n    }\r\n    const [localPageState, setLocalPageState] = useState(0);\r\n    const [selectedNumber, setSelectedNumber] = useState(0);\r\n    const [tempMapper, setTempMapper] = useState([]);\r\n    const [jobSelected, setJobSelected] = useState(true);\r\n    const [selectedSection, setSelectedSection] = useState(0);\r\n    const [jobList, setJobList] = useState('');\r\n\r\n    // Use Effect to determine on launch if message is the first one being sent\r\n    // TODO - Update to determine if in the middle of a part of a key\r\n    useEffect (() => {\r\n        const tempList = JSON.parse(localStorage.getItem('messagingList'));\r\n\r\n        // Work was saved: pull from known list\r\n        if (tempList !== '' && tempList !== null) {\r\n        } else {\r\n            // Determine if a job has been selected\r\n            if (currentJobKey) {\r\n                // Job has been selected: update correct variables\r\n                let tempHolder = [];\r\n                for (let x = 0; x < jobSettings.assignedUsers; x++) {\r\n                    tempHolder.push(x);\r\n                }\r\n                setTempMapper(tempHolder);\r\n            } else {\r\n                // Job has not been selected, don't attempt to run commands that will fail\r\n                setJobSelected(false);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        localStorage.setItem('messagingList', JSON.stringify(list));\r\n    }\r\n\r\n    const handlePartSelection = (group) => {\r\n        let startEnd = calculateSplits(jobSettings.assignedUsers, group);\r\n        console.log(startEnd);\r\n        let tempList = messagingList;\r\n        setList({PersonsList: tempList.slice(startEnd.start, startEnd.end+1)});\r\n        setTimeout(() => {\r\n            console.log(list);\r\n            setFirstMessage(true);\r\n            setLocalPageState(1);\r\n        }, 500);\r\n    }\r\n\r\n    const calculateSplits = (users, group) => {\r\n        // Divide entries by the number of users covering the job, split\r\n        let start = group === 0? 0 : (messagingList.length * group / users) + 1;\r\n        let end = messagingList.length * (group+1) / users;\r\n        return ({\r\n            start: start,\r\n            end: end\r\n        });\r\n    }\r\n\r\n    const sendMessage = async(sendMessage) => {\r\n        console.log('entered');\r\n        // Call API\r\n        if (sendMessage) {\r\n            if (firstMessage) {\r\n                setFirstMessage(false);\r\n            } else {\r\n                console.log(\"Remaining: \",list.PersonsList.length);\r\n                console.log('+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone);\r\n                if (list.imageURL !== '') {\r\n                    await axios.post(\"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Messages.json\", qs.stringify({\r\n                        Body: list.message,\r\n                        MediaUrl: list.imageURL,\r\n                        From: '+17253739818',\r\n                        To: '+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone\r\n                    }), {\r\n                        auth: {\r\n                        username: accountSid,\r\n                        password: authToken\r\n                        }\r\n                    })\r\n                    .then (\r\n                        res => console.log(res)\r\n                    )\r\n                    .catch((error) => {\r\n                        if (error === 400 || error === 401) {\r\n                            console.log(error);\r\n                        }\r\n                    })\r\n                } else {\r\n                    await axios.post(\"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Messages.json\", qs.stringify({\r\n                        Body: list.message,\r\n                        From: '+17253739818',\r\n                        To: '+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone\r\n                    }), {\r\n                        auth: {\r\n                        username: accountSid,\r\n                        password: authToken\r\n                        }\r\n                    })\r\n                    .then (\r\n                        res => console.log(res)\r\n                    )\r\n                    .catch((error) => {\r\n                        if (error === 400 || error === 401) {\r\n                            console.log(error);\r\n                        }\r\n                    })\r\n                }\r\n                console.log(\"Message sent to \", list.PersonsList[list.PersonsList.length - 1].FirstName);\r\n            }\r\n        } else {\r\n            console.log(\"Message not sent\");\r\n        }\r\n        // Update list\r\n        if (list.PersonsList.length === 1) {\r\n            setDisplayState(4);\r\n        } else {\r\n            let tempMessageList = list.PersonsList;\r\n            tempMessageList.pop()\r\n            // let tempList = {\r\n            //     user: list.user,\r\n            //     imageURL: list.imageURL,\r\n            //     message: list.message,\r\n            //     PersonsList: messageList\r\n            // }\r\n            let tempList = {PersonsList: tempMessageList};\r\n            console.log(tempList);\r\n            setList(tempList);\r\n        }\r\n        console.log(\"setting sendMessage to false\");\r\n        setSendingMessage(false);\r\n    }\r\n\r\n    const handleSendMessage = (event) => {\r\n        switch(event.keyCode) {\r\n            case 34:\r\n                sendMessage(false);\r\n                break;\r\n            default:\r\n                if (event.keyCode !== previousKey) {\r\n                    setPreviousKey(event.keyCode);\r\n                    sendMessage(true);\r\n                }\r\n        }\r\n        if (list.PersonsList.length === 0) {\r\n            setDisplayState(4);\r\n        }\r\n    }\r\n\r\n    if (jobSelected) {\r\n        if (localPageState === 0) {\r\n            return (\r\n                <div className = \"page\">\r\n                    <div className = \"sectionSelection\">\r\n                        <h3> Which part would you like to work on?</h3>\r\n                        {\r\n                            tempMapper.map((element) => {\r\n                                return (\r\n                                    <button onClick = {() => handlePartSelection(element)}> {element} </button>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                list !== null\r\n                    ?<div className = \"page\">\r\n                        <div className = \"SendMessage\">\r\n                            <h2> Press page down to skip sending a message to the listed user. </h2>\r\n                            <h2> Would you like to message {list.PersonsList[list.PersonsList.length - 1].FirstName} {list.PersonsList[list.PersonsList.length - 1].LastName}?</h2>\r\n                            <button onClick = {() => {\r\n                            if (!sendingMessage || hasClicked >= 1) {\r\n                                console.log(\"setting sendMessage to true\");\r\n                                setHasClicked(0);\r\n                                setSendingMessage(true);\r\n                                sendMessage(true);\r\n                            }}}> Yes </button>\r\n                            <button onClick = {() => {\r\n                                if (!sendingMessage || hasClicked >= 1) {\r\n                                    setHasClicked(0);\r\n                                    console.log(\"setting sendMessage to true\");\r\n                                setSendingMessage(true);\r\n                                sendMessage(false);\r\n                            }}}> No </button>\r\n                            {/* <input onKeyDown = {(event) => {\r\n                            if (!sendingMessage || hasClicked >= 1) {\r\n                                setHasClicked(2);\r\n                                console.log(\"setting sendMessage to true\");\r\n                                setSendingMessage(true);\r\n                                handleSendMessage(event);\r\n                            } else {\r\n                                setHasClicked(1);\r\n                            }}} value={emptyString}\r\n                                disabled = {true}\r\n                            /> */}\r\n                            <input onKeyDown = {(event) => {\r\n                                console.log(\"Hello World\");\r\n                            }}\r\n                            />\r\n                            <button onClick = {() => handleSave()}> Save </button>\r\n                        </div>\r\n                    </div>\r\n                    : <div />\r\n            )\r\n        }\r\n    } else {\r\n        return (<div> <h3> No job is selected </h3></div>)\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport './index.scss'\r\n\r\nexport const SelectJobPage = (props) => {\r\n\r\n    const {setDisplayState} = props;\r\n    const availableJobs = JSON.parse(localStorage.getItem('jobInfo'));\r\n    const [displayErrorMessage, setDisplayErrorMessage] = useState(false);\r\n    const [selectedJob, setSelectedJob] = useState('');\r\n\r\n    const handleSave = () => {\r\n        // Determine selected value and write to localStorage\r\n        if (selectedJob !== \"\") {\r\n            setDisplayErrorMessage(false);\r\n            console.log(selectedJob);\r\n            localStorage.setItem(\"currentJob\", JSON.stringify({selectedJob: selectedJob}));\r\n            setDisplayState(999)\r\n        } else {\r\n            setDisplayErrorMessage(true);\r\n        }\r\n    }\r\n\r\n    console.log(\"availableJobs: \",availableJobs);\r\n\r\n    return (\r\n        <div className = \"SelectJob\">\r\n            { availableJobs !== null\r\n                ? <div className = \"JobAvailable\">\r\n                    <div className = \"Selection\">\r\n                        <label for=\"Job\"> Selected Job: </label>\r\n                        <select \r\n                            name=\"Job\"\r\n                            id=\"Job\"\r\n                            onChange={(event) => {\r\n                                setDisplayErrorMessage(false);\r\n                                setSelectedJob(event.target.value)\r\n                        }}>\r\n                            <option value={''} defaultValue/>\r\n                            {availableJobs.Jobs.map((e, index) => (\r\n                                <option value={e.jobName} key={index}> {e.jobName} </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <button onClick = {() => {handleSave()}}> Save</button>\r\n                    {displayErrorMessage? <div className = \"ErrorMessageSelectJob\">No Job Is Selected</div>: null}\r\n                </div>\r\n                : <div> No jobs available </div>\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}","import { XLSXInput } from \"../XLSXInput\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport const UploadSpreadsheetPage = (props) => {\r\n\r\n    const [storedJobInfo, setStoredJobInfo] = useState('');\r\n    const [jobNameInput, setJobNameInput] = useState('');\r\n    const [displayAlertMessage, setDisplayAlertMessage] = useState(false);\r\n    const [displayAlertMessage2, setDisplayAlertMessage2] = useState(false);\r\n    const {setDisplayState} = props;\r\n\r\n    const handleUpload = () => {\r\n        setDisplayAlertMessage2(false);\r\n        // Pull list of jobs\r\n        if (jobNameInput !== '') {\r\n            let list = JSON.parse(localStorage.getItem(jobNameInput));\r\n            if (list === null) {\r\n                setDisplayAlertMessage(false);\r\n                if (storedJobInfo !== null && storedJobInfo !== '') {\r\n                    // Pull old lists and update them, otherwise create lists from scratch\r\n                    let currentJobList = JSON.parse(localStorage.getItem('jobInfo'));\r\n                    if (currentJobList === null) {\r\n                        currentJobList = {Jobs: []};\r\n                    }\r\n                    const defaultSettings = {\r\n                        messagesPerKeyPress: 1,\r\n                        assignedUsers: 3,\r\n                        userList: [\r\n                            \"eric\",\r\n                            \"justin\",\r\n                            \"omar\"\r\n                        ]\r\n                    }\r\n                    currentJobList.Jobs.push({jobName: jobNameInput});\r\n                    localStorage.setItem(jobNameInput, JSON.stringify(storedJobInfo));\r\n                    localStorage.setItem('jobInfo', JSON.stringify(currentJobList));\r\n                    localStorage.setItem(\"settings\"+jobNameInput, JSON.stringify(defaultSettings))\r\n                    setDisplayState(999);\r\n                } else {\r\n                    setDisplayAlertMessage2(true);\r\n                }\r\n            } else {\r\n                setDisplayAlertMessage(true);\r\n            }\r\n        } else {\r\n            setDisplayAlertMessage(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className = \"UploadeSpreadsheet\">\r\n            <h3> Spreadsheet Upload Specs: </h3>\r\n            <div className=\"XLSUpsload\">\r\n                <label> Select a Spreadsheet: </label>\r\n                <XLSXInput setter={setStoredJobInfo}/>\r\n            </div>\r\n            <div className=\"JobNameSelect\">\r\n                <label for=\"JobNameSelection\"> Select Job Name: </label>\r\n                <input id = \"JobNameSelection\" onChange = {(event) => setJobNameInput(event.target.value)}/>\r\n            </div>\r\n            <button onClick = {() => handleUpload()}> Upload </button>\r\n            {displayAlertMessage\r\n            ? <div className = \"errorMessage\">Name is not permitted</div>\r\n            : null\r\n            }\r\n            {displayAlertMessage2\r\n            ? <div className = \"errorMessage\">No spreadsheet has been uploaded</div>\r\n            : null\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const JobSettings = (props) => {\r\n\r\n    const {setDisplayState} = props;\r\n    const [inputs, setInputs] = useState(0);\r\n    const [numUsers, setNumUsers] = useState(0);\r\n    const [jobIsSelected, setJobIsSelected] = useState(true);\r\n    const [loadedJobSettings, setLoadedJobSettings] = useState({});\r\n    let jobSettings = '';\r\n\r\n    // On launch, pull settings for currently selected job and \r\n    useEffect(()=> {\r\n        const selectedJob = JSON.parse(localStorage.getItem(\"currentJob\"));\r\n        if (selectedJob === null || selectedJob === '') {\r\n            setJobIsSelected (false);\r\n        } else {\r\n            // Pull up job settings\r\n            jobSettings = JSON.parse(localStorage.getItem(\"settings\"+selectedJob.selectedJob));\r\n            setLoadedJobSettings(jobSettings);\r\n            setInputs(jobSettings.messagesPerKeyPress);\r\n            setNumUsers(jobSettings.assignedUsers);\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        const selectedJob = JSON.parse(localStorage.getItem(\"currentJob\"));\r\n        jobSettings = JSON.parse(localStorage.getItem(\"settings\"+selectedJob.selectedJob));\r\n        jobSettings.messagesPerKeyPress = inputs;\r\n        jobSettings.assignedUsers = numUsers;\r\n        localStorage.setItem(\"settings\"+selectedJob.selectedJob, JSON.stringify(jobSettings));\r\n        setDisplayState(999);\r\n    }\r\n\r\n    return (\r\n        jobIsSelected\r\n        ? <div className = \"jobSettingsPage\">\r\n            <div className = \"inputsPerPress\">\r\n                <label> Messages sent per press: </label>\r\n                <input value = {inputs} onChange = {(event) => setInputs(event.target.value)}/>\r\n            </div>\r\n            <div className = \"workers\">\r\n                <label> Number of users working on selected job:</label>\r\n                <input value = {numUsers} onChange = {(event) => setNumUsers(event.target.value)}/>\r\n            </div>\r\n            <button onClick = {() => handleSave()}>Update</button>\r\n        </div>\r\n        : <h3> No Job is Selected </h3>\r\n    )\r\n}","import { ImageInput } from \"../ImageInput\"\r\nimport { CheckBox } from \"../CheckBox\"\r\nimport { MessageBox } from \"../MessageBox\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { XLSXInput } from \"../XLSXInput\";\r\nimport './index.scss';\r\nimport { LoginPage } from \"../LoginPage\";\r\nimport { EditMessage } from \"../EditMessage\";\r\nimport { Header } from \"../Header\";\r\nimport { SendMessages } from \"../SendMessages\";\r\nimport { SelectJobPage } from \"../SelectJobPage\";\r\nimport { UploadSpreadsheetPage } from \"../UploadSpreadsheetPage\";\r\nimport { JobSettings } from \"../JobSettings\";\r\n\r\nexport const MessagingSite = (props) => {\r\n    const [isListSplit, setIsListSplit] = useState(false);\r\n    const [displayState, setDisplayState] = useState(1);\r\n    const [longMessage, setLongMessage] = useState(false);\r\n    const [messageContents, setMessageContents] = useState('');\r\n    const [displayImageInput, setDisplayImageInput] = useState(true);\r\n    const [list, setList] = useState('');\r\n    const [user, setUser] = useState('');\r\n    const [messageList, setMessageList] = useState('');\r\n    const [displayLoaded, setDisplayLoaded] = useState(false);\r\n    const [firstMessage, setFirstMessage] = useState(true);\r\n    const [imageURL, setImageURL] = useState('');\r\n    \r\n\r\n    /*\r\n    TextMessagingSystem: {\r\n        user: \"UserName\"\r\n        message: \"message\"\r\n        image: \"imagePath\"\r\n        PersonsList: {[\r\n            {\r\n                First_Name: \"FirstName\",\r\n                Last_Name: \"LastName\",\r\n                Phone_Number: \"PhoneNumber\"\r\n            },\r\n            {\r\n                First_Name: \"FirstName\",\r\n                Last_Name: \"LastName\",\r\n                Phone_Number: \"PhoneNumber\"\r\n            }\r\n        ]}\r\n        Responses: {\r\n            First_Last: \"Yes/No\"\r\n        }\r\n    }\r\n    */\r\n    useEffect(() => {\r\n        // // See if a save state is stored in local memory\r\n        // const tempList = JSON.parse(localStorage.getItem('messagingList'));\r\n        // console.log(tempList);\r\n        // if (tempList !== '' && tempList !== null) {\r\n        //     setList(tempList);\r\n        //     setFirstMessage(false);\r\n        //     setDisplayLoaded(true);\r\n        //     setTimeout(() => {\r\n        //         setDisplayState(3);\r\n        //         setIsListSplit(true);\r\n        //     }, 1000);\r\n        // } else {\r\n        //     setDisplayState(1);\r\n        // }\r\n        setDisplayState(1);\r\n\r\n    }, []);\r\n\r\n    const handleSplit = () => {\r\n        let name = user;\r\n        let tempMessageList = messageList;\r\n        let start = 0;\r\n        let end = 0;\r\n        switch (name) {\r\n            case (\"justin\") :\r\n                start = 0;\r\n                end = Math.floor(messageList.length / 3);\r\n                break;\r\n            case (\"eric\") :\r\n                if (messageList.length % 3 !== 0) {\r\n                    start = Math.ceil(messageList.length / 3)\r\n                } else {\r\n                    start = (messageList.length / 3) + 1;\r\n                }\r\n                end = Math.floor(2 * messageList.length / 3);\r\n                break;\r\n            case (\"omar\"):\r\n                if (messageList.length % 3 !== 0) {\r\n                    start = Math.ceil(2 * messageList.length / 3)\r\n                } else {\r\n                    start = (2 * messageList.length / 3) + 1;\r\n                }\r\n                end = messageList.length - 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(\"start:\" ,start);\r\n        console.log(\"end:\" ,end);\r\n        tempMessageList = messageList.slice(start, end+1);\r\n        console.log(\"splice: \",messageList.slice(start, end+1));\r\n        setMessageList(messageList.slice(start, end+1));\r\n        console.log(\"Message List: \",messageList);\r\n        setDisplayLoaded(true);\r\n    }\r\n\r\n    const handleResetSite = () => {\r\n        // Reset localStorage and displayState\r\n        localStorage.removeItem('messagingList');\r\n        setDisplayState(1);\r\n    }\r\n\r\n\r\n    // Display States:\r\n    // 0: null page (used only for testing)\r\n    // 1: login page\r\n    // 2: job selection\r\n    // 3: message selection\r\n    // 4: spreadsheet upload\r\n    // 5: user settings (admin only)\r\n    console.log(\"Displaystate: \",displayState);\r\n    if (displayState === 0) {\r\n        <div className = \"NightModeTesting\">\r\n\r\n        </div>\r\n    } else if (displayState === 1) {\r\n        console.log(\"1\");\r\n        // return (<LoginPage user={user} setUser={setUser} setDisplayState={setDisplayState} setIsListSplit={setIsListSplit}/>)\r\n        return (<div> Hello World </div>)\r\n        // return(<Header name={\"Justin\"}/>);\r\n    } else if (displayState >= 2) {\r\n        return (\r\n            <div className = \"FullSiteDisplay\">\r\n                <Header name={user} setDisplay={setDisplayState}/>\r\n                {displayState === 2\r\n                ? <EditMessage longMessage={longMessage} setMessageContents={setMessageContents} setLongMessage={setLongMessage} displayImageInput={displayImageInput} setImageURL={setImageURL} imageURL={imageURL} setDisplayImageInput={setDisplayImageInput} messageContents={messageContents}/>\r\n                :displayState === 3\r\n                ? <SendMessages list = {list} displayLoaded = {displayLoaded} setDisplayState = {setDisplayState} setList = {setList} messageList = {messageList}/>\r\n                : displayState === 4\r\n                ? <div className = \"page\">\r\n                    <div className = \"finishBox\">\r\n                        <h2>Done sending messages</h2>\r\n                        <button onClick = {() => handleResetSite()}> Reset </button>\r\n                    </div>\r\n                </div>\r\n                :displayState === 5\r\n                ? <SelectJobPage setDisplayState = {setDisplayState}/>\r\n                : displayState === 6\r\n                ? <UploadSpreadsheetPage setDisplayState = {setDisplayState}/>\r\n                :displayState === 7\r\n                ? <JobSettings setDisplayState = {setDisplayState}/>\r\n                : <div />     \r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n}","import { MessagingSite } from \"./components/Webpage\";\r\n\r\nfunction App() {\r\n    console.log(\"Hello World\");\r\n    return (\r\n        <MessagingSite />\r\n    )\r\n} \r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import ('web-vitals').then (({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReeactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReeactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}