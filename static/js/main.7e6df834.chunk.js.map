{"version":3,"sources":["components/CheckBox/index.jsx","components/XLSXInput/index.jsx","components/LoginPage/index.jsx","components/Header/index.jsx","components/SendMessages/index.jsx","components/SelectJobPage/index.jsx","components/UploadSpreadsheetPage/index.jsx","components/JobSettings/index.jsx","components/Webpage/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["CheckBox","props","label","setter","set","className","for","type","id","name","onChange","checked","XLSXInput","accept","e","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_json","onerror","error","then","d","tempHolder","x","length","push","FirstName","LastName","PrimaryPhone","CellPhone","readExcel","files","LoginPage","user","setUser","setDisplayState","setIsListSplit","useState","stayLoggedIn","setStayLoggedIn","useEffect","console","log","localStorage","getItem","savedLogin","JSON","parse","handleLogin","username","userName","password","userInfo","setItem","stringify","removeItem","handleStayLoggedIn","event","value","onClick","Header","setDisplay","SendMessages","list","displayLoaded","setList","messageList","hasClicked","setHasClicked","sendingMessage","setSendingMessage","firstMessage","setFirstMessage","accountSid","authToken","qs","require","currentJobKey","jobSettings","messagingList","selectedJob","localPageState","setLocalPageState","tempMapper","setTempMapper","jobSelected","setJobSelected","tempList","assignedUsers","calculateSplits","users","group","start","end","sendMessageFunction","sendMessage","number","a","PersonsList","imageURL","axios","post","Body","message","MediaUrl","From","To","auth","res","catch","tempMessageList","pop","map","element","startEnd","slice","setTimeout","handlePartSelection","messagesPerKeyPress","onKeyDown","SelectJobPage","availableJobs","displayErrorMessage","setDisplayErrorMessage","setSelectedJob","defaultValue","Jobs","index","jobName","UploadSpreadsheetPage","storedJobInfo","setStoredJobInfo","jobNameInput","setJobNameInput","displayAlertMessage","setDisplayAlertMessage","displayAlertMessage2","setDisplayAlertMessage2","currentJobList","userList","handleUpload","JobSettings","inputs","setInputs","numUsers","setNumUsers","jobIsSelected","setJobIsSelected","setLoadedJobSettings","handleSave","MessagingSite","displayState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReeactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e6df834.chunk.js","sourcesContent":["export const CheckBox = (props) => {\r\n    const {label, setter, set} = props;\r\n    return (\r\n        <div className = \"CheckBox\">\r\n            <label for=\"checkbox\"> {label} </label>\r\n            {set? <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" onChange = {() => {setter(!set)}} checked/>\r\n            : <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" onChange = {() => {setter(!set)}} />\r\n            }\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nexport const XLSXInput = (props) => {\r\n\r\n  const {setter} = props;\r\n\r\n  const readExcel = (file) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = (e) => {\r\n        const bufferArray = e.target.result;\r\n\r\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n\r\n        const wsname = wb.SheetNames[0];\r\n\r\n        const ws = wb.Sheets[wsname];\r\n\r\n        const data = XLSX.utils.sheet_to_json(ws);\r\n\r\n        resolve(data);\r\n      };\r\n\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n\r\n    promise.then((d) => {\r\n      let tempHolder = [];\r\n      for (let x = 0; x < d.length; x++) {\r\n          tempHolder.push({\r\n              FirstName: d[x].FirstName,\r\n              LastName: d[x].LastName,\r\n              PrimaryPhone: d[x].CellPhone\r\n          })\r\n      }\r\n      setter(tempHolder);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n        onChange={(e) => {\r\n          const file = e.target.files[0];\r\n          readExcel(file);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}","import { CheckBox } from '../CheckBox';\r\nimport './index.scss';\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const LoginPage = (props) => {\r\n\r\n    const {user, setUser, setDisplayState, setIsListSplit} = props;\r\n    const [stayLoggedIn, setStayLoggedIn] = useState(true);\r\n\r\n    const handleStayLoggedIn = (user, password) => {\r\n        if (stayLoggedIn) {\r\n            // write to local storage\r\n            const userInfo = {\r\n                username: user\r\n            }\r\n            localStorage.setItem('progchamp', JSON.stringify(userInfo));\r\n        } else {\r\n            localStorage.removeItem('progchamp');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(localStorage.getItem('progchamp'));\r\n        const savedLogin = JSON.parse(localStorage.getItem('progchamp'));\r\n        if (savedLogin !== null && savedLogin !== '') {\r\n            // User exists, attempt to log in with saved details\r\n            handleLogin(savedLogin.username);\r\n        } else {\r\n            //setStayLoggedIn(false);\r\n        }\r\n    }, []);\r\n\r\n    const handleLogin = (userName) => {\r\n        handleStayLoggedIn(userName, '');\r\n        switch (userName) {\r\n            case (\"justin\") :\r\n                setUser(\"justin\");\r\n                setDisplayState(999);\r\n                setIsListSplit(false);\r\n                return;\r\n            case (\"eric\"):\r\n                setUser(\"eric\");\r\n                setDisplayState(999);\r\n                setIsListSplit(false);\r\n                return;\r\n            case (\"omar\"):\r\n                setUser(\"omar\");\r\n                setDisplayState(999);\r\n                setIsListSplit(false);\r\n                return;\r\n            default:\r\n                setUser(\"\");\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"page\">\r\n            <div className = \"loginPage\">\r\n                <div className = \"usernameInput\">\r\n                    <label> Username: </label>\r\n                    <input onChange={(event) => setUser(event.target.value)}/>\r\n                </div>\r\n                <CheckBox label = {\"Stay Logged in: \"} setter={setStayLoggedIn} set={stayLoggedIn} />\r\n                <button onClick={() => {handleLogin(user)}}> Submit </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './index.scss';\r\n\r\nexport const Header = (props) => {\r\n    const {name, setDisplay} = props;\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('progchamp');\r\n        setDisplay(1);\r\n    }\r\n\r\n    return (\r\n        <div className = \"HeaderBar\">\r\n            <div className = \"selectable\">\r\n                <button onClick = {() => {setDisplay(5)}}> \r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Select Job</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(2)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Edit Message</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(6)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Upload Spreadsheet</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => setDisplay(3)}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Send Messages</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(7)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Job Settings</h3>\r\n                    </div>\r\n                </button>\r\n                <button>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Manage Users</h3>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n            <button onClick = {() => handleLogout()}>\r\n                <div className = \"buttonBackground\">\r\n                    <h3>{name}</h3>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const SendMessages = (props) => {\r\n\r\n    const {list, displayLoaded, setDisplayState, messageList, setList} = props;\r\n    const [hasClicked, setHasClicked] = useState(0);\r\n    const [sendingMessage, setSendingMessage] = useState(false);\r\n    const emptyString = '';\r\n    const [firstMessage, setFirstMessage] = useState(false);\r\n    const [previousKey, setPreviousKey] = useState('');\r\n    const accountSid = \"AC328815b6f17c750d80bedcc36bb5f3ce\"; // Primary Account\r\n    // const accountSid = \"ACf0660d83b54452dd82af793988b69485\"; // Testing account\r\n    const authToken = \"90924da28b6854a695c34a12bac34e5a\"; // Primary Account\r\n    // const authToken = \"bf5cc12a2c492f49030aae72ef397e45\"; // Testing account\r\n    var qs = require('qs');\r\n    const twilio = require('twilio');\r\n    const client = new twilio(accountSid, authToken);\r\n    const currentJobKey = JSON.parse(localStorage.getItem('currentJob'))\r\n    let jobSettings = '';\r\n    let message = '';\r\n    let messagingList = '';\r\n    if (currentJobKey !== null && currentJobKey !== '') {\r\n        jobSettings = JSON.parse(localStorage.getItem(\"settings\"+currentJobKey.selectedJob));\r\n        message = JSON.parse(localStorage.getItem(\"message\"+currentJobKey.selectedJob));\r\n        messagingList = JSON.parse(localStorage.getItem(currentJobKey.selectedJob));\r\n    }\r\n    const [localPageState, setLocalPageState] = useState(0);\r\n    const [selectedNumber, setSelectedNumber] = useState(0);\r\n    const [tempMapper, setTempMapper] = useState([]);\r\n    const [jobSelected, setJobSelected] = useState(true);\r\n    const [selectedSection, setSelectedSection] = useState(0);\r\n    const [jobList, setJobList] = useState('');\r\n    console.log(jobSettings);\r\n\r\n    // Use Effect to determine on launch if message is the first one being sent\r\n    // TODO - Update to determine if in the middle of a part of a key\r\n    useEffect (() => {\r\n        const tempList = JSON.parse(localStorage.getItem('messagingList'));\r\n\r\n        // Work was saved: pull from known list\r\n        if (tempList !== '' && tempList !== null) {\r\n        } else {\r\n            // Determine if a job has been selected\r\n            if (currentJobKey) {\r\n                // Job has been selected: update correct variables\r\n                let tempHolder = [];\r\n                for (let x = 0; x < jobSettings.assignedUsers; x++) {\r\n                    tempHolder.push(x);\r\n                }\r\n                setTempMapper(tempHolder);\r\n            } else {\r\n                // Job has not been selected, don't attempt to run commands that will fail\r\n                setJobSelected(false);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        localStorage.setItem('messagingList', JSON.stringify(list));\r\n    }\r\n\r\n    const handlePartSelection = (group) => {\r\n        let startEnd = calculateSplits(jobSettings.assignedUsers, group);\r\n        console.log(startEnd);\r\n        let tempList = messagingList;\r\n        setList({PersonsList: tempList.slice(startEnd.start, startEnd.end+1)});\r\n        setTimeout(() => {\r\n            console.log(list);\r\n            setFirstMessage(true);\r\n            setLocalPageState(1);\r\n        }, 500);\r\n    }\r\n\r\n    const calculateSplits = (users, group) => {\r\n        // Divide entries by the number of users covering the job, split\r\n        let start = group === 0? 0 : (messagingList.length * group / users) + 1;\r\n        let end = messagingList.length * (group+1) / users;\r\n        return ({\r\n            start: start,\r\n            end: end\r\n        });\r\n    }\r\n\r\n    const sendMessageFunction = async(sendMessage, number) => {\r\n        console.log('entered');\r\n        let counter = 0;\r\n        if (number === 0) {\r\n            return;\r\n        }\r\n        // Call API\r\n        if (sendMessage) {\r\n            if (firstMessage) {\r\n                setFirstMessage(false);\r\n            } else {\r\n                console.log(\"Remaining: \",list.PersonsList.length);\r\n                console.log('+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone);\r\n                if (list.imageURL !== '') {\r\n                    await axios.post(\"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Messages.json\", qs.stringify({\r\n                        Body: list.message,\r\n                        MediaUrl: list.imageURL,\r\n                        From: '+17253739818',\r\n                        To: '+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone\r\n                    }), {\r\n                        auth: {\r\n                        username: accountSid,\r\n                        password: authToken\r\n                        }\r\n                    })\r\n                    .then (\r\n                        res => console.log(res)\r\n                    )\r\n                    .catch((error) => {\r\n                        if (error === 400 || error === 401) {\r\n                            console.log(error);\r\n                        }\r\n                    })\r\n                } else {\r\n                    await axios.post(\"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/Messages.json\", qs.stringify({\r\n                        Body: list.message,\r\n                        From: '+17253739818',\r\n                        To: '+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone\r\n                    }), {\r\n                        auth: {\r\n                        username: accountSid,\r\n                        password: authToken\r\n                        }\r\n                    })\r\n                    .then (\r\n                        res => console.log(res)\r\n                    )\r\n                    .catch((error) => {\r\n                        if (error === 400 || error === 401) {\r\n                            console.log(error);\r\n                        }\r\n                    })\r\n                }\r\n                console.log(\"Message sent to \", list.PersonsList[list.PersonsList.length - 1].FirstName);\r\n            }\r\n        } else {\r\n            console.log(\"Message not sent\");\r\n        }\r\n        // Update list\r\n        if (list.PersonsList.length === 1) {\r\n            setDisplayState(4);\r\n        } else {\r\n            let tempMessageList = list.PersonsList;\r\n            tempMessageList.pop()\r\n            // let tempList = {\r\n            //     user: list.user,\r\n            //     imageURL: list.imageURL,\r\n            //     message: list.message,\r\n            //     PersonsList: messageList\r\n            // }\r\n            let tempList = {PersonsList: tempMessageList};\r\n            console.log(tempList);\r\n            setList(tempList);\r\n        }\r\n        sendMessageFunction(sendMessage, number-1);\r\n        console.log(\"setting sendMessage to false\");\r\n        setSendingMessage(false);\r\n    }\r\n\r\n    const handleSendMessage = (event) => {\r\n        switch(event.keyCode) {\r\n            case 34:\r\n                sendMessageFunction(false, jobSettings.messagesPerKeyPress);\r\n                break;\r\n            default:\r\n                if (event.keyCode !== previousKey) {\r\n                    setPreviousKey(event.keyCode);\r\n                    sendMessageFunction(true, jobSettings.messagesPerKeyPress);\r\n                }\r\n        }\r\n        if (list.PersonsList.length === 0) {\r\n            setDisplayState(4);\r\n        }\r\n    }\r\n\r\n    if (jobSelected) {\r\n        if (localPageState === 0) {\r\n            return (\r\n                <div className = \"page\">\r\n                    <div className = \"sectionSelection\">\r\n                        <h3> Which part would you like to work on?</h3>\r\n                        {\r\n                            tempMapper.map((element) => {\r\n                                return (\r\n                                    <button onClick = {() => handlePartSelection(element)}> {element} </button>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                list !== null\r\n                    ?<div className = \"page\">\r\n                        <div className = \"SendMessage\">\r\n                            <h2> Press page down to skip sending a message to the listed user. </h2>\r\n                            <h2> Would you like to message {list.PersonsList[list.PersonsList.length - 1].FirstName} {list.PersonsList[list.PersonsList.length - 1].LastName} {jobSettings.messagesPerKeyPress > 1? \" and \"+ JSON.stringify(jobSettings.messagesPerKeyPress-1) + \" more\": null}?</h2>\r\n                            <button onClick = {() => {\r\n                            if (!sendingMessage || hasClicked >= 1) {\r\n                                console.log(\"setting sendMessage to true\");\r\n                                setHasClicked(0);\r\n                                setSendingMessage(true);\r\n                                sendMessageFunction(true, jobSettings.messagesPerKeyPress);\r\n                            }}}> Yes </button>\r\n                            <button onClick = {() => {\r\n                                if (!sendingMessage || hasClicked >= 1) {\r\n                                    setHasClicked(0);\r\n                                    console.log(\"setting sendMessage to true\");\r\n                                setSendingMessage(true);\r\n                                sendMessageFunction(false, jobSettings.messagesPerKeyPress);\r\n                            }}}> No </button>\r\n                            {/* <input onKeyDown = {(event) => {\r\n                            if (!sendingMessage || hasClicked >= 1) {\r\n                                setHasClicked(2);\r\n                                console.log(\"setting sendMessage to true\");\r\n                                setSendingMessage(true);\r\n                                handleSendMessage(event);\r\n                            } else {\r\n                                setHasClicked(1);\r\n                            }}} value={emptyString}\r\n                                disabled = {true}\r\n                            /> */}\r\n                            <input onKeyDown = {(event) => {\r\n                                console.log(\"Hello World\");\r\n                            }}\r\n                            />\r\n                            <button onClick = {() => handleSave()}> Save </button>\r\n                        </div>\r\n                    </div>\r\n                    : <div />\r\n            )\r\n        }\r\n    } else {\r\n        return (<div> <h3> No job is selected </h3></div>)\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport './index.scss'\r\n\r\nexport const SelectJobPage = (props) => {\r\n\r\n    const {setDisplayState} = props;\r\n    const availableJobs = JSON.parse(localStorage.getItem('jobInfo'));\r\n    const [displayErrorMessage, setDisplayErrorMessage] = useState(false);\r\n    const [selectedJob, setSelectedJob] = useState('');\r\n\r\n    const handleSave = () => {\r\n        // Determine selected value and write to localStorage\r\n        if (selectedJob !== \"\") {\r\n            setDisplayErrorMessage(false);\r\n            console.log(selectedJob);\r\n            localStorage.setItem(\"currentJob\", JSON.stringify({selectedJob: selectedJob}));\r\n            setDisplayState(999)\r\n        } else {\r\n            setDisplayErrorMessage(true);\r\n        }\r\n    }\r\n\r\n    console.log(\"availableJobs: \",availableJobs);\r\n\r\n    return (\r\n        <div className = \"SelectJob\">\r\n            { availableJobs !== null\r\n                ? <div className = \"JobAvailable\">\r\n                    <div className = \"Selection\">\r\n                        <label for=\"Job\"> Selected Job: </label>\r\n                        <select \r\n                            name=\"Job\"\r\n                            id=\"Job\"\r\n                            onChange={(event) => {\r\n                                setDisplayErrorMessage(false);\r\n                                setSelectedJob(event.target.value)\r\n                        }}>\r\n                            <option value={''} defaultValue/>\r\n                            {availableJobs.Jobs.map((e, index) => (\r\n                                <option value={e.jobName} key={index}> {e.jobName} </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <button onClick = {() => {handleSave()}}> Save</button>\r\n                    {displayErrorMessage? <div className = \"ErrorMessageSelectJob\">No Job Is Selected</div>: null}\r\n                </div>\r\n                : <div> No jobs available </div>\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}","import { XLSXInput } from \"../XLSXInput\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport const UploadSpreadsheetPage = (props) => {\r\n\r\n    const [storedJobInfo, setStoredJobInfo] = useState('');\r\n    const [jobNameInput, setJobNameInput] = useState('');\r\n    const [displayAlertMessage, setDisplayAlertMessage] = useState(false);\r\n    const [displayAlertMessage2, setDisplayAlertMessage2] = useState(false);\r\n    const {setDisplayState} = props;\r\n\r\n    const handleUpload = () => {\r\n        setDisplayAlertMessage2(false);\r\n        // Pull list of jobs\r\n        if (jobNameInput !== '') {\r\n            let list = JSON.parse(localStorage.getItem(jobNameInput));\r\n            if (list === null) {\r\n                setDisplayAlertMessage(false);\r\n                if (storedJobInfo !== null && storedJobInfo !== '') {\r\n                    // Pull old lists and update them, otherwise create lists from scratch\r\n                    let currentJobList = JSON.parse(localStorage.getItem('jobInfo'));\r\n                    if (currentJobList === null) {\r\n                        currentJobList = {Jobs: []};\r\n                    }\r\n                    const defaultSettings = {\r\n                        messagesPerKeyPress: 1,\r\n                        assignedUsers: 3,\r\n                        userList: [\r\n                            \"eric\",\r\n                            \"justin\",\r\n                            \"omar\"\r\n                        ]\r\n                    }\r\n                    currentJobList.Jobs.push({jobName: jobNameInput});\r\n                    localStorage.setItem(jobNameInput, JSON.stringify(storedJobInfo));\r\n                    localStorage.setItem('jobInfo', JSON.stringify(currentJobList));\r\n                    localStorage.setItem(\"settings\"+jobNameInput, JSON.stringify(defaultSettings))\r\n                    setDisplayState(999);\r\n                } else {\r\n                    setDisplayAlertMessage2(true);\r\n                }\r\n            } else {\r\n                setDisplayAlertMessage(true);\r\n            }\r\n        } else {\r\n            setDisplayAlertMessage(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className = \"UploadeSpreadsheet\">\r\n            <h3> Spreadsheet Upload Specs: </h3>\r\n            <div className=\"XLSUpsload\">\r\n                <label> Select a Spreadsheet: </label>\r\n                <XLSXInput setter={setStoredJobInfo}/>\r\n            </div>\r\n            <div className=\"JobNameSelect\">\r\n                <label for=\"JobNameSelection\"> Select Job Name: </label>\r\n                <input id = \"JobNameSelection\" onChange = {(event) => setJobNameInput(event.target.value)}/>\r\n            </div>\r\n            <button onClick = {() => handleUpload()}> Upload </button>\r\n            {displayAlertMessage\r\n            ? <div className = \"errorMessage\">Name is not permitted</div>\r\n            : null\r\n            }\r\n            {displayAlertMessage2\r\n            ? <div className = \"errorMessage\">No spreadsheet has been uploaded</div>\r\n            : null\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const JobSettings = (props) => {\r\n\r\n    const {setDisplayState} = props;\r\n    const [inputs, setInputs] = useState(0);\r\n    const [numUsers, setNumUsers] = useState(0);\r\n    const [jobIsSelected, setJobIsSelected] = useState(true);\r\n    const [loadedJobSettings, setLoadedJobSettings] = useState({});\r\n    let jobSettings = '';\r\n\r\n    // On launch, pull settings for currently selected job and \r\n    useEffect(()=> {\r\n        const selectedJob = JSON.parse(localStorage.getItem(\"currentJob\"));\r\n        if (selectedJob === null || selectedJob === '') {\r\n            setJobIsSelected (false);\r\n        } else {\r\n            // Pull up job settings\r\n            jobSettings = JSON.parse(localStorage.getItem(\"settings\"+selectedJob.selectedJob));\r\n            setLoadedJobSettings(jobSettings);\r\n            setInputs(jobSettings.messagesPerKeyPress);\r\n            setNumUsers(jobSettings.assignedUsers);\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        const selectedJob = JSON.parse(localStorage.getItem(\"currentJob\"));\r\n        jobSettings = JSON.parse(localStorage.getItem(\"settings\"+selectedJob.selectedJob));\r\n        jobSettings.messagesPerKeyPress = inputs;\r\n        jobSettings.assignedUsers = numUsers;\r\n        localStorage.setItem(\"settings\"+selectedJob.selectedJob, JSON.stringify(jobSettings));\r\n        setDisplayState(999);\r\n    }\r\n\r\n    return (\r\n        jobIsSelected\r\n        ? <div className = \"jobSettingsPage\">\r\n            <div className = \"inputsPerPress\">\r\n                <label> Messages sent per press: </label>\r\n                <input value = {inputs} onChange = {(event) => setInputs(event.target.value)}/>\r\n            </div>\r\n            <div className = \"workers\">\r\n                <label> Number of users working on selected job:</label>\r\n                <input value = {numUsers} onChange = {(event) => setNumUsers(event.target.value)}/>\r\n            </div>\r\n            <button onClick = {() => handleSave()}>Update</button>\r\n        </div>\r\n        : <h3> No Job is Selected </h3>\r\n    )\r\n}","import { ImageInput } from \"../ImageInput\"\r\nimport { CheckBox } from \"../CheckBox\"\r\nimport { MessageBox } from \"../MessageBox\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { XLSXInput } from \"../XLSXInput\";\r\nimport './index.scss';\r\nimport { LoginPage } from \"../LoginPage\";\r\nimport { EditMessage } from \"../EditMessage\";\r\nimport { Header } from \"../Header\";\r\nimport { SendMessages } from \"../SendMessages\";\r\nimport { SelectJobPage } from \"../SelectJobPage\";\r\nimport { UploadSpreadsheetPage } from \"../UploadSpreadsheetPage\";\r\nimport { JobSettings } from \"../JobSettings\";\r\n\r\nexport const MessagingSite = (props) => {\r\n    const [isListSplit, setIsListSplit] = useState(false);\r\n    const [displayState, setDisplayState] = useState(999);\r\n    const [longMessage, setLongMessage] = useState(false);\r\n    const [messageContents, setMessageContents] = useState('');\r\n    const [displayImageInput, setDisplayImageInput] = useState(true);\r\n    const [list, setList] = useState('');\r\n    const [user, setUser] = useState('');\r\n    const [messageList, setMessageList] = useState('');\r\n    const [displayLoaded, setDisplayLoaded] = useState(false);\r\n    const [firstMessage, setFirstMessage] = useState(true);\r\n    const [imageURL, setImageURL] = useState('');\r\n    \r\n\r\n    /*\r\n    TextMessagingSystem: {\r\n        user: \"UserName\"\r\n        message: \"message\"\r\n        image: \"imagePath\"\r\n        PersonsList: {[\r\n            {\r\n                First_Name: \"FirstName\",\r\n                Last_Name: \"LastName\",\r\n                Phone_Number: \"PhoneNumber\"\r\n            },\r\n            {\r\n                First_Name: \"FirstName\",\r\n                Last_Name: \"LastName\",\r\n                Phone_Number: \"PhoneNumber\"\r\n            }\r\n        ]}\r\n        Responses: {\r\n            First_Last: \"Yes/No\"\r\n        }\r\n    }\r\n    */\r\n    // useEffect(() => {\r\n    //     // // See if a save state is stored in local memory\r\n    //     // const tempList = JSON.parse(localStorage.getItem('messagingList'));\r\n    //     // console.log(tempList);\r\n    //     // if (tempList !== '' && tempList !== null) {\r\n    //     //     setList(tempList);\r\n    //     //     setFirstMessage(false);\r\n    //     //     setDisplayLoaded(true);\r\n    //     //     setTimeout(() => {\r\n    //     //         setDisplayState(3);\r\n    //     //         setIsListSplit(true);\r\n    //     //     }, 1000);\r\n    //     // } else {\r\n    //     //     setDisplayState(1);\r\n    //     // }\r\n    //     setDisplayState(1);\r\n\r\n    // }, []);\r\n\r\n    const handleSplit = () => {\r\n        let name = user;\r\n        let tempMessageList = messageList;\r\n        let start = 0;\r\n        let end = 0;\r\n        switch (name) {\r\n            case (\"justin\") :\r\n                start = 0;\r\n                end = Math.floor(messageList.length / 3);\r\n                break;\r\n            case (\"eric\") :\r\n                if (messageList.length % 3 !== 0) {\r\n                    start = Math.ceil(messageList.length / 3)\r\n                } else {\r\n                    start = (messageList.length / 3) + 1;\r\n                }\r\n                end = Math.floor(2 * messageList.length / 3);\r\n                break;\r\n            case (\"omar\"):\r\n                if (messageList.length % 3 !== 0) {\r\n                    start = Math.ceil(2 * messageList.length / 3)\r\n                } else {\r\n                    start = (2 * messageList.length / 3) + 1;\r\n                }\r\n                end = messageList.length - 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(\"start:\" ,start);\r\n        console.log(\"end:\" ,end);\r\n        tempMessageList = messageList.slice(start, end+1);\r\n        console.log(\"splice: \",messageList.slice(start, end+1));\r\n        setMessageList(messageList.slice(start, end+1));\r\n        console.log(\"Message List: \",messageList);\r\n        setDisplayLoaded(true);\r\n    }\r\n\r\n    const handleResetSite = () => {\r\n        // Reset localStorage and displayState\r\n        localStorage.removeItem('messagingList');\r\n        setDisplayState(999);\r\n    }\r\n\r\n\r\n    // Display States:\r\n    // 0: null page (used only for testing)\r\n    // 1: login page\r\n    // 2: job selection\r\n    // 3: message selection\r\n    // 4: spreadsheet upload\r\n    // 5: user settings (admin only)\r\n    console.log(\"Displaystate: \",displayState);\r\n    if (displayState === 0) {\r\n        <div className = \"NightModeTesting\">\r\n\r\n        </div>\r\n    } else if (displayState === 1) {\r\n        return (<LoginPage user={user} setUser={setUser} setDisplayState={setDisplayState} setIsListSplit={setIsListSplit}/>)\r\n        // return (<div> Hello World </div>)\r\n        // return(<Header name={\"Justin\"}/>);\r\n    } else if (displayState >= 2) {\r\n        return (\r\n            <div className = \"FullSiteDisplay\">\r\n                <Header name={user} setDisplay={setDisplayState}/>\r\n                {displayState === 2\r\n                ? <div> Hello World </div>//<EditMessage longMessage={longMessage} setMessageContents={setMessageContents} setLongMessage={setLongMessage} displayImageInput={displayImageInput} setImageURL={setImageURL} imageURL={imageURL} setDisplayImageInput={setDisplayImageInput} messageContents={messageContents} setDisplayState = {setDisplayState}/>\r\n                :displayState === 3\r\n                ? <SendMessages list = {list} displayLoaded = {displayLoaded} setDisplayState = {setDisplayState} setList = {setList} messageList = {messageList}/>\r\n                : displayState === 4\r\n                ? <div className = \"page\">\r\n                    <div className = \"finishBox\">\r\n                        <h2>Done sending messages</h2>\r\n                        <button onClick = {() => handleResetSite()}> Reset </button>\r\n                    </div>\r\n                </div>\r\n                :displayState === 5\r\n                ? <SelectJobPage setDisplayState = {setDisplayState}/>\r\n                : displayState === 6\r\n                ? <UploadSpreadsheetPage setDisplayState = {setDisplayState}/>\r\n                :displayState === 7\r\n                ? <JobSettings setDisplayState = {setDisplayState}/>\r\n                : <div />     \r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n}","import { MessagingSite } from \"./components/Webpage\";\r\n\r\nfunction App() {\r\n    console.log(\"Hello World\");\r\n    return (\r\n        <MessagingSite />\r\n    )\r\n} \r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import ('web-vitals').then (({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReeactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReeactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}