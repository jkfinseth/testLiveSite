{"version":3,"sources":["components/ImageInput/index.jsx","components/CheckBox/index.jsx","components/MessageBox/index.jsx","components/XLSXInput/index.jsx","components/LoginPage/index.jsx","components/EditMessage/index.jsx","components/Header/index.jsx","components/SendMessages/index.jsx","components/SelectJobPage/index.jsx","components/UploadSpreadsheetPage/index.jsx","components/JobSettings/index.jsx","components/Webpage/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ImageInput","props","setImageURL","imageURL","className","for","type","value","onChange","event","target","CheckBox","label","setter","set","id","name","checked","MessageBox","limitLength","messageContents","XLSXInput","accept","e","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_json","onerror","error","then","d","tempHolder","x","length","push","FirstName","LastName","PrimaryPhone","CellPhone","readExcel","files","LoginPage","user","setUser","setDisplayState","setIsListSplit","useState","stayLoggedIn","setStayLoggedIn","useEffect","console","log","localStorage","getItem","savedLogin","JSON","parse","handleLogin","username","userName","password","userInfo","setItem","stringify","removeItem","handleStayLoggedIn","onClick","EditMessage","longMessage","setMessageContents","displayImageInput","setLongMessage","setDisplayImageInput","messageSaved","currentJob","keyName","selectedJob","isJobSelected","setIsJobSelected","refresh","setRefresh","tempMessage","message","setTimeout","storedMessage","handleStoreInfo","Header","setDisplay","SendMessages","require","config","list","displayLoaded","setList","messageList","hasClicked","setHasClicked","sendingMessage","setSendingMessage","firstMessage","setFirstMessage","qs","twilio","xiv","xvi","currentJobKey","jobSettings","messagingList","localPageState","setLocalPageState","tempMapper","setTempMapper","jobSelected","setJobSelected","testVar","setTestVar","tempList","assignedUsers","calculateSplits","users","group","start","end","sendMessageFunction","sendMessage","number","a","endLoop","PersonsList","axios","post","Body","MediaUrl","From","To","auth","res","catch","tempMessageList","pop","map","element","startEnd","slice","handlePartSelection","messagesPerKeyPress","onKeyDown","SelectJobPage","availableJobs","displayErrorMessage","setDisplayErrorMessage","setSelectedJob","defaultValue","Jobs","index","jobName","UploadSpreadsheetPage","storedJobInfo","setStoredJobInfo","jobNameInput","setJobNameInput","displayAlertMessage","setDisplayAlertMessage","displayAlertMessage2","setDisplayAlertMessage2","currentJobList","userList","handleUpload","JobSettings","inputs","setInputs","numUsers","setNumUsers","jobIsSelected","setJobIsSelected","setLoadedJobSettings","handleSave","MessagingSite","displayState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReeactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ec07bae.chunk.js","sourcesContent":["export const ImageInput = (props) => {\r\n    const {setImageURL, imageURL} = props;\r\n    return (\r\n        <div className = \"imageInput\">\r\n            <label for=\"file\">Chose image URL to upload: </label>\r\n            {/*<input type=\"file\" id=\"file\" name=\"file\" accept=\".png, .jpg, .jpeg\" />*/}\r\n            <input type=\"text\" value = {imageURL} onChange = {(event) => setImageURL(event.target.value)}/>\r\n        </div>\r\n    )\r\n}","export const CheckBox = (props) => {\r\n    const {label, setter, set} = props;\r\n    return (\r\n        <div className = \"CheckBox\">\r\n            <label for=\"checkbox\"> {label} </label>\r\n            {set? <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" onChange = {() => {setter(!set)}} checked/>\r\n            : <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" onChange = {() => {setter(!set)}} />\r\n            }\r\n        </div>\r\n    );\r\n}","export const MessageBox = (props) => {\r\n    const {limitLength, setter, messageContents} = props;\r\n    return (\r\n        <div className = \"MessageBox\">\r\n            <label for=\"message\"> Message: </label>\r\n            <input type=\"text\" value = {messageContents} id=\"message\" name=\"message\" onChange = {(event) => setter(event.target.value)}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nexport const XLSXInput = (props) => {\r\n\r\n  const {setter} = props;\r\n\r\n  const readExcel = (file) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n\r\n      fileReader.onload = (e) => {\r\n        const bufferArray = e.target.result;\r\n\r\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n\r\n        const wsname = wb.SheetNames[0];\r\n\r\n        const ws = wb.Sheets[wsname];\r\n\r\n        const data = XLSX.utils.sheet_to_json(ws);\r\n\r\n        resolve(data);\r\n      };\r\n\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n\r\n    promise.then((d) => {\r\n      let tempHolder = [];\r\n      for (let x = 0; x < d.length; x++) {\r\n          tempHolder.push({\r\n              FirstName: d[x].FirstName,\r\n              LastName: d[x].LastName,\r\n              PrimaryPhone: d[x].CellPhone\r\n          })\r\n      }\r\n      setter(tempHolder);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n        onChange={(e) => {\r\n          const file = e.target.files[0];\r\n          readExcel(file);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}","import { CheckBox } from '../CheckBox';\r\nimport './index.scss';\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const LoginPage = (props) => {\r\n\r\n    const {user, setUser, setDisplayState, setIsListSplit} = props;\r\n    const [stayLoggedIn, setStayLoggedIn] = useState(true);\r\n\r\n    const handleStayLoggedIn = (user, password) => {\r\n        if (stayLoggedIn) {\r\n            // write to local storage\r\n            const userInfo = {\r\n                username: user\r\n            }\r\n            localStorage.setItem('progchamp', JSON.stringify(userInfo));\r\n        } else {\r\n            localStorage.removeItem('progchamp');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(localStorage.getItem('progchamp'));\r\n        const savedLogin = JSON.parse(localStorage.getItem('progchamp'));\r\n        if (savedLogin !== null && savedLogin !== '') {\r\n            // User exists, attempt to log in with saved details\r\n            handleLogin(savedLogin.username);\r\n        } else {\r\n            //setStayLoggedIn(false);\r\n        }\r\n    }, []);\r\n\r\n    const handleLogin = (userName) => {\r\n        handleStayLoggedIn(userName, '');\r\n        switch (userName) {\r\n            case (\"justin\") :\r\n                setUser(\"justin\");\r\n                setDisplayState(999);\r\n                setIsListSplit(false);\r\n                return;\r\n            case (\"eric\"):\r\n                setUser(\"eric\");\r\n                setDisplayState(999);\r\n                setIsListSplit(false);\r\n                return;\r\n            case (\"omar\"):\r\n                setUser(\"omar\");\r\n                setDisplayState(999);\r\n                setIsListSplit(false);\r\n                return;\r\n            default:\r\n                setUser(\"\");\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"page\">\r\n            <div className = \"loginPage\">\r\n                <div className = \"usernameInput\">\r\n                    <label> Username: </label>\r\n                    <input onChange={(event) => setUser(event.target.value)}/>\r\n                </div>\r\n                <CheckBox label = {\"Stay Logged in: \"} setter={setStayLoggedIn} set={stayLoggedIn} />\r\n                <button onClick={() => {handleLogin(user)}}> Submit </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { MessageBox } from \"../MessageBox\"\r\nimport { CheckBox } from \"../CheckBox\"\r\nimport { ImageInput } from \"../ImageInput\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport './index.scss';\r\n\r\nexport const EditMessage = (props) => {\r\n    const {longMessage, setMessageContents, setLongMessage, displayImageInput, setImageURL, imageURL, setDisplayImageInput, messageContents, setDisplayState} = props;\r\n    const [messageSaved, setMessageSaved] = useState(0);\r\n    const currentJob = JSON.parse(localStorage.getItem('currentJob'));\r\n    const keyName = 'message'+currentJob?.selectedJob;\r\n    const [isJobSelected, setIsJobSelected] = useState(true);\r\n    const [refresh, setRefresh] = useState(0);\r\n\r\n    useEffect(() => {\r\n        console.log(\"Hello World Use Effect\");\r\n        if (currentJob === null || currentJob === '') {\r\n            // No job is selected, alert user that nothing is being edited\r\n            setIsJobSelected(false);\r\n        } else {\r\n            console.log(\"not broken 1\");\r\n            // Job is selected, see if info can be pulled\r\n            const tempMessage = JSON.parse(localStorage.getItem(keyName));\r\n            console.log(\"not broken 2\");\r\n            if (tempMessage !== null && tempMessage !== '') {\r\n                // Message existed: fill blanks accordingly\r\n                setMessageContents(tempMessage.message);\r\n                if (tempMessage.imageURL !== '') {\r\n                    setImageURL(tempMessage.imageURL);\r\n                }\r\n                setRefresh(1);\r\n                setTimeout(() => setRefresh(0), 1);\r\n            }\r\n            console.log(\"Refresh: \",refresh);\r\n        }\r\n    }, [])\r\n\r\n    // const handleStoreInfo = () => {\r\n    //     let tempURL = imageURL;\r\n    //     setDisplayLoaded(false);\r\n    //     handleSplit();\r\n    //     let tempList = {\r\n    //         user: user,\r\n    //         imageURL: tempURL,\r\n    //         message: messageContents,\r\n    //         PersonsList: messageList\r\n    //     }\r\n    //     setList(tempList);\r\n    // }\r\n\r\n    const handleStoreInfo = () => {\r\n        let storedMessage = {\r\n            message: messageContents,\r\n            imageURL: ''\r\n        }\r\n\r\n        if (imageURL !== null && imageURL !== '') {\r\n            storedMessage.imageURL = imageURL;\r\n        }\r\n\r\n        localStorage.setItem(keyName, JSON.stringify(storedMessage));\r\n        setDisplayState(999);\r\n    }\r\n\r\n    return (\r\n        refresh === 0\r\n        ? <div className = \"page\">\r\n                {isJobSelected\r\n                ? <div className = \"MessageInputs\">\r\n                <MessageBox limitLength = {longMessage} setter={setMessageContents} messageContents={messageContents}/>\r\n                { displayImageInput? <ImageInput setImageURL = {setImageURL} imageURL = {imageURL}/>: <div />}\r\n                <CheckBox label=\"Send Image\" setter={setDisplayImageInput} set={displayImageInput}/>\r\n                <button onClick={() => handleStoreInfo()}> Save </button>\r\n                {messageSaved === 1?<h3> Message Saved</h3>\r\n                : <div />\r\n                }\r\n                </div>\r\n                : <h3> No Job is Selected</h3>\r\n                }\r\n            </div>\r\n        : <div />\r\n    )\r\n}","import './index.scss';\r\n\r\nexport const Header = (props) => {\r\n    const {name, setDisplay} = props;\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('progchamp');\r\n        setDisplay(1);\r\n    }\r\n\r\n    return (\r\n        <div className = \"HeaderBar\">\r\n            <div className = \"selectable\">\r\n                <button onClick = {() => {setDisplay(5)}}> \r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Select Job</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(2)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Edit Message</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(6)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Upload Spreadsheet</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => setDisplay(3)}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Send Messages</h3>\r\n                    </div>\r\n                </button>\r\n                <button onClick = {() => {setDisplay(7)}}>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Job Settings</h3>\r\n                    </div>\r\n                </button>\r\n                <button>\r\n                    <div className = \"buttonBackground\">\r\n                        <h3>Manage Users</h3>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n            <button onClick = {() => handleLogout()}>\r\n                <div className = \"buttonBackground\">\r\n                    <h3>{name}</h3>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const SendMessages = (props) => {\r\n\r\n    require(\"dotenv\").config()\r\n    const {list, displayLoaded, setDisplayState, messageList, setList} = props;\r\n    const [hasClicked, setHasClicked] = useState(0);\r\n    const [sendingMessage, setSendingMessage] = useState(false);\r\n    const emptyString = '';\r\n    const [firstMessage, setFirstMessage] = useState(false);\r\n    const [previousKey, setPreviousKey] = useState('');\r\n    var qs = require('qs');\r\n    const twilio = require('twilio');\r\n    const xiv = \"AC328815b6f17c750d80bedcc36bb5f3ce\"\r\n    const xvi = \"ce2b0d823f101654b8e88dffde764266\"\r\n    const client = new twilio(xiv, xvi);\r\n    const currentJobKey = JSON.parse(localStorage.getItem('currentJob'))\r\n    let jobSettings = '';\r\n    let message = '';\r\n    let messagingList = '';\r\n    if (currentJobKey !== null && currentJobKey !== '') {\r\n        jobSettings = JSON.parse(localStorage.getItem(\"settings\"+currentJobKey.selectedJob));\r\n        message = JSON.parse(localStorage.getItem(\"message\"+currentJobKey.selectedJob));\r\n        messagingList = JSON.parse(localStorage.getItem(currentJobKey.selectedJob));\r\n    }\r\n    const [localPageState, setLocalPageState] = useState(0);\r\n    const [selectedNumber, setSelectedNumber] = useState(0);\r\n    const [tempMapper, setTempMapper] = useState([]);\r\n    const [jobSelected, setJobSelected] = useState(true);\r\n    const [selectedSection, setSelectedSection] = useState(0);\r\n    const [jobList, setJobList] = useState('');\r\n    console.log(jobSettings);\r\n    const [testVar, setTestVar] = useState(false);\r\n\r\n    // Use Effect to determine on launch if message is the first one being sent\r\n    // TODO - Update to determine if in the middle of a part of a key\r\n    useEffect (() => {\r\n        const tempList = JSON.parse(localStorage.getItem('messagingList'));\r\n\r\n        // Work was saved: pull from known list\r\n        if (tempList !== '' && tempList !== null) {\r\n        } else {\r\n            // Determine if a job has been selected\r\n            if (currentJobKey) {\r\n                // Job has been selected: update correct variables\r\n                let tempHolder = [];\r\n                for (let x = 0; x < jobSettings.assignedUsers; x++) {\r\n                    tempHolder.push(x);\r\n                }\r\n                setTempMapper(tempHolder);\r\n            } else {\r\n                // Job has not been selected, don't attempt to run commands that will fail\r\n                setJobSelected(false);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        localStorage.setItem('messagingList', JSON.stringify(list));\r\n    }\r\n\r\n    const handlePartSelection = (group) => {\r\n        let startEnd = calculateSplits(jobSettings.assignedUsers, group);\r\n        console.log(startEnd);\r\n        let tempList = messagingList;\r\n        setList({PersonsList: tempList.slice(startEnd.start, startEnd.end+1)});\r\n        setTimeout(() => {\r\n            console.log(list);\r\n            setFirstMessage(false);\r\n            setLocalPageState(1);\r\n        }, 500);\r\n    }\r\n\r\n    const calculateSplits = (users, group) => {\r\n        // Divide entries by the number of users covering the job, split\r\n        let start = group === 0? 0 : (messagingList.length * group / users) + 1;\r\n        let end = messagingList.length * (group+1) / users;\r\n        return ({\r\n            start: start,\r\n            end: end\r\n        });\r\n    }\r\n\r\n    const sendMessageFunction = async(sendMessage, number) => {\r\n        console.log('entered');\r\n        let endLoop = false;\r\n        let counter = 0;\r\n        if (number === 0) {\r\n            return;\r\n        }\r\n        if (list.PersonsList.length === 1) {\r\n            console.log('one person left: checking');\r\n            if (testVar) {\r\n                setTestVar(false);\r\n                return;\r\n            }\r\n            setTestVar(true);\r\n        }\r\n        // Call API\r\n        if (sendMessage) {\r\n            if (firstMessage) {\r\n                setFirstMessage(false);\r\n            } else {\r\n                console.log(\"Remaining: \",list.PersonsList.length);\r\n                console.log('+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone);\r\n                if (list.imageURL !== '') {\r\n                    await axios.post(\"https://api.twilio.com/2010-04-01/Accounts/\" + xiv + \"/Messages.json\", qs.stringify({\r\n                        Body: message.message,\r\n                        MediaUrl: message.imageURL,\r\n                        From: '+17253739818',\r\n                        To: '+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone\r\n                    }), {\r\n                        auth: {\r\n                        username: xiv,\r\n                        password: xvi\r\n                        }\r\n                    })\r\n                    .then (\r\n                        res => console.log(res)\r\n                    )\r\n                    .catch((error) => {\r\n                        if (error === 400 || error === 401) {\r\n                            console.log(error);\r\n                        }\r\n                    })\r\n                } else {\r\n                    await axios.post(\"https://api.twilio.com/2010-04-01/Accounts/\" + xiv + \"/Messages.json\", qs.stringify({\r\n                        Body: message.message,\r\n                        From: '+17253739818',\r\n                        To: '+1'+list.PersonsList[list.PersonsList.length - 1].PrimaryPhone\r\n                    }), {\r\n                        auth: {\r\n                        username: xiv,\r\n                        password: xvi\r\n                        }\r\n                    })\r\n                    .then (\r\n                        res => console.log(res)\r\n                    )\r\n                    .catch((error) => {\r\n                        if (error === 400 || error === 401) {\r\n                            console.log(error);\r\n                        }\r\n                    })\r\n                }\r\n                console.log(\"Message sent to \", list.PersonsList[list.PersonsList.length - 1].FirstName);\r\n            }\r\n        } else {\r\n            console.log(\"Message not sent\");\r\n        }\r\n        // Update list\r\n        if (list.PersonsList.length === 1) {\r\n            setDisplayState(4);\r\n            // TODO - Ensure this works\r\n            endLoop = true;\r\n        } else {\r\n            let tempMessageList = list.PersonsList;\r\n            let tempHolder = tempMessageList.pop()\r\n            // let tempList = {\r\n            //     user: list.user,\r\n            //     imageURL: list.imageURL,\r\n            //     message: list.message,\r\n            //     PersonsList: messageList\r\n            // }\r\n            if (tempHolder == tempMessageList) {\r\n                endLoop = true;\r\n            }\r\n            let tempList = {PersonsList: tempMessageList};\r\n            console.log(tempList);\r\n            setList(tempList);\r\n        }\r\n        if (!endLoop) {\r\n            sendMessageFunction(sendMessage, number-1);\r\n        }\r\n        console.log(\"setting sendMessage to false\");\r\n        setSendingMessage(false);\r\n    }\r\n\r\n    const handleSendMessage = (event) => {\r\n        switch(event.keyCode) {\r\n            case 34:\r\n                sendMessageFunction(false, jobSettings.messagesPerKeyPress);\r\n                break;\r\n            default:\r\n                if (event.keyCode !== previousKey) {\r\n                    setPreviousKey(event.keyCode);\r\n                    sendMessageFunction(true, jobSettings.messagesPerKeyPress);\r\n                }\r\n        }\r\n        if (list.PersonsList.length === 0) {\r\n            setDisplayState(4);\r\n        }\r\n    }\r\n\r\n    if (jobSelected) {\r\n        if (localPageState === 0) {\r\n            return (\r\n                <div className = \"page\">\r\n                    <div className = \"sectionSelection\">\r\n                        <h3> Which part would you like to work on?</h3>\r\n                        {\r\n                            tempMapper.map((element) => {\r\n                                return (\r\n                                    <button onClick = {() => handlePartSelection(element)}> {element} </button>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                list !== null\r\n                    ?<div className = \"page\">\r\n                        <div className = \"SendMessage\">\r\n                            <h2> Press page down to skip sending a message to the listed user. </h2>\r\n                            <h2> Would you like to message {list.PersonsList[list.PersonsList.length - 1].FirstName} {list.PersonsList[list.PersonsList.length - 1].LastName} {jobSettings.messagesPerKeyPress > 1? \" and \"+ JSON.stringify(jobSettings.messagesPerKeyPress-1) + \" more\": null}?</h2>\r\n                            <button onClick = {() => {\r\n                            if (!sendingMessage || hasClicked >= 1) {\r\n                                console.log(\"setting sendMessage to true\");\r\n                                setHasClicked(0);\r\n                                setSendingMessage(true);\r\n                                sendMessageFunction(true, jobSettings.messagesPerKeyPress);\r\n                            }}}> Yes </button>\r\n                            <button onClick = {() => {\r\n                                if (!sendingMessage || hasClicked >= 1) {\r\n                                    setHasClicked(0);\r\n                                    console.log(\"setting sendMessage to true\");\r\n                                setSendingMessage(true);\r\n                                sendMessageFunction(false, jobSettings.messagesPerKeyPress);\r\n                            }}}> No </button>\r\n                            {/* <input onKeyDown = {(event) => {\r\n                            if (!sendingMessage || hasClicked >= 1) {\r\n                                setHasClicked(2);\r\n                                console.log(\"setting sendMessage to true\");\r\n                                setSendingMessage(true);\r\n                                handleSendMessage(event);\r\n                            } else {\r\n                                setHasClicked(1);\r\n                            }}} value={emptyString}\r\n                                disabled = {true}\r\n                            /> */}\r\n                            <input onKeyDown = {(event) => {\r\n                                console.log(\"Hello World\");\r\n                            }}\r\n                            />\r\n                            <button onClick = {() => handleSave()}> Save </button>\r\n                        </div>\r\n                    </div>\r\n                    : <div />\r\n            )\r\n        }\r\n    } else {\r\n        return (<div> <h3> No job is selected </h3></div>)\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport './index.scss'\r\n\r\nexport const SelectJobPage = (props) => {\r\n\r\n    const {setDisplayState} = props;\r\n    const availableJobs = JSON.parse(localStorage.getItem('jobInfo'));\r\n    const [displayErrorMessage, setDisplayErrorMessage] = useState(false);\r\n    const [selectedJob, setSelectedJob] = useState('');\r\n\r\n    const handleSave = () => {\r\n        // Determine selected value and write to localStorage\r\n        if (selectedJob !== \"\") {\r\n            setDisplayErrorMessage(false);\r\n            console.log(selectedJob);\r\n            localStorage.setItem(\"currentJob\", JSON.stringify({selectedJob: selectedJob}));\r\n            setDisplayState(999)\r\n        } else {\r\n            setDisplayErrorMessage(true);\r\n        }\r\n    }\r\n\r\n    console.log(\"availableJobs: \",availableJobs);\r\n\r\n    return (\r\n        <div className = \"SelectJob\">\r\n            { availableJobs !== null\r\n                ? <div className = \"JobAvailable\">\r\n                    <div className = \"Selection\">\r\n                        <label for=\"Job\"> Selected Job: </label>\r\n                        <select \r\n                            name=\"Job\"\r\n                            id=\"Job\"\r\n                            onChange={(event) => {\r\n                                setDisplayErrorMessage(false);\r\n                                setSelectedJob(event.target.value)\r\n                        }}>\r\n                            <option value={''} defaultValue/>\r\n                            {availableJobs.Jobs.map((e, index) => (\r\n                                <option value={e.jobName} key={index}> {e.jobName} </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <button onClick = {() => {handleSave()}}> Save</button>\r\n                    {displayErrorMessage? <div className = \"ErrorMessageSelectJob\">No Job Is Selected</div>: null}\r\n                </div>\r\n                : <div> No jobs available </div>\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}","import { XLSXInput } from \"../XLSXInput\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport const UploadSpreadsheetPage = (props) => {\r\n\r\n    const [storedJobInfo, setStoredJobInfo] = useState('');\r\n    const [jobNameInput, setJobNameInput] = useState('');\r\n    const [displayAlertMessage, setDisplayAlertMessage] = useState(false);\r\n    const [displayAlertMessage2, setDisplayAlertMessage2] = useState(false);\r\n    const {setDisplayState} = props;\r\n\r\n    const handleUpload = () => {\r\n        setDisplayAlertMessage2(false);\r\n        // Pull list of jobs\r\n        if (jobNameInput !== '') {\r\n            let list = JSON.parse(localStorage.getItem(jobNameInput));\r\n            if (list === null) {\r\n                setDisplayAlertMessage(false);\r\n                if (storedJobInfo !== null && storedJobInfo !== '') {\r\n                    // Pull old lists and update them, otherwise create lists from scratch\r\n                    let currentJobList = JSON.parse(localStorage.getItem('jobInfo'));\r\n                    if (currentJobList === null) {\r\n                        currentJobList = {Jobs: []};\r\n                    }\r\n                    const defaultSettings = {\r\n                        messagesPerKeyPress: 1,\r\n                        assignedUsers: 3,\r\n                        userList: [\r\n                            \"eric\",\r\n                            \"justin\",\r\n                            \"omar\"\r\n                        ]\r\n                    }\r\n                    currentJobList.Jobs.push({jobName: jobNameInput});\r\n                    localStorage.setItem(jobNameInput, JSON.stringify(storedJobInfo));\r\n                    localStorage.setItem('jobInfo', JSON.stringify(currentJobList));\r\n                    localStorage.setItem(\"settings\"+jobNameInput, JSON.stringify(defaultSettings))\r\n                    setDisplayState(999);\r\n                } else {\r\n                    setDisplayAlertMessage2(true);\r\n                }\r\n            } else {\r\n                setDisplayAlertMessage(true);\r\n            }\r\n        } else {\r\n            setDisplayAlertMessage(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className = \"UploadeSpreadsheet\">\r\n            <h3> Spreadsheet Upload Specs: </h3>\r\n            <div className=\"XLSUpsload\">\r\n                <label> Select a Spreadsheet: </label>\r\n                <XLSXInput setter={setStoredJobInfo}/>\r\n            </div>\r\n            <div className=\"JobNameSelect\">\r\n                <label for=\"JobNameSelection\"> Select Job Name: </label>\r\n                <input id = \"JobNameSelection\" onChange = {(event) => setJobNameInput(event.target.value)}/>\r\n            </div>\r\n            <button onClick = {() => handleUpload()}> Upload </button>\r\n            {displayAlertMessage\r\n            ? <div className = \"errorMessage\">Name is not permitted</div>\r\n            : null\r\n            }\r\n            {displayAlertMessage2\r\n            ? <div className = \"errorMessage\">No spreadsheet has been uploaded</div>\r\n            : null\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const JobSettings = (props) => {\r\n\r\n    const {setDisplayState} = props;\r\n    const [inputs, setInputs] = useState(0);\r\n    const [numUsers, setNumUsers] = useState(0);\r\n    const [jobIsSelected, setJobIsSelected] = useState(true);\r\n    const [loadedJobSettings, setLoadedJobSettings] = useState({});\r\n    let jobSettings = '';\r\n\r\n    // On launch, pull settings for currently selected job and \r\n    useEffect(()=> {\r\n        const selectedJob = JSON.parse(localStorage.getItem(\"currentJob\"));\r\n        if (selectedJob === null || selectedJob === '') {\r\n            setJobIsSelected (false);\r\n        } else {\r\n            // Pull up job settings\r\n            jobSettings = JSON.parse(localStorage.getItem(\"settings\"+selectedJob.selectedJob));\r\n            setLoadedJobSettings(jobSettings);\r\n            setInputs(jobSettings.messagesPerKeyPress);\r\n            setNumUsers(jobSettings.assignedUsers);\r\n        }\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        const selectedJob = JSON.parse(localStorage.getItem(\"currentJob\"));\r\n        jobSettings = JSON.parse(localStorage.getItem(\"settings\"+selectedJob.selectedJob));\r\n        jobSettings.messagesPerKeyPress = inputs;\r\n        jobSettings.assignedUsers = numUsers;\r\n        localStorage.setItem(\"settings\"+selectedJob.selectedJob, JSON.stringify(jobSettings));\r\n        setDisplayState(999);\r\n    }\r\n\r\n    return (\r\n        jobIsSelected\r\n        ? <div className = \"jobSettingsPage\">\r\n            <div className = \"inputsPerPress\">\r\n                <label> Messages sent per press: </label>\r\n                <input value = {inputs} onChange = {(event) => setInputs(event.target.value)}/>\r\n            </div>\r\n            <div className = \"workers\">\r\n                <label> Number of users working on selected job:</label>\r\n                <input value = {numUsers} onChange = {(event) => setNumUsers(event.target.value)}/>\r\n            </div>\r\n            <button onClick = {() => handleSave()}>Update</button>\r\n        </div>\r\n        : <h3> No Job is Selected </h3>\r\n    )\r\n}","import { ImageInput } from \"../ImageInput\"\r\nimport { CheckBox } from \"../CheckBox\"\r\nimport { MessageBox } from \"../MessageBox\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { XLSXInput } from \"../XLSXInput\";\r\nimport './index.scss';\r\nimport { LoginPage } from \"../LoginPage\";\r\nimport { EditMessage } from \"../EditMessage\";\r\nimport { Header } from \"../Header\";\r\nimport { SendMessages } from \"../SendMessages\";\r\nimport { SelectJobPage } from \"../SelectJobPage\";\r\nimport { UploadSpreadsheetPage } from \"../UploadSpreadsheetPage\";\r\nimport { JobSettings } from \"../JobSettings\";\r\n\r\nexport const MessagingSite = (props) => {\r\n    const [isListSplit, setIsListSplit] = useState(false);\r\n    const [displayState, setDisplayState] = useState(999);\r\n    const [longMessage, setLongMessage] = useState(false);\r\n    const [messageContents, setMessageContents] = useState('');\r\n    const [displayImageInput, setDisplayImageInput] = useState(true);\r\n    const [list, setList] = useState('');\r\n    const [user, setUser] = useState('');\r\n    const [messageList, setMessageList] = useState('');\r\n    const [displayLoaded, setDisplayLoaded] = useState(false);\r\n    const [firstMessage, setFirstMessage] = useState(true);\r\n    const [imageURL, setImageURL] = useState('');\r\n    \r\n\r\n    /*\r\n    TextMessagingSystem: {\r\n        user: \"UserName\"\r\n        message: \"message\"\r\n        image: \"imagePath\"\r\n        PersonsList: {[\r\n            {\r\n                First_Name: \"FirstName\",\r\n                Last_Name: \"LastName\",\r\n                Phone_Number: \"PhoneNumber\"\r\n            },\r\n            {\r\n                First_Name: \"FirstName\",\r\n                Last_Name: \"LastName\",\r\n                Phone_Number: \"PhoneNumber\"\r\n            }\r\n        ]}\r\n        Responses: {\r\n            First_Last: \"Yes/No\"\r\n        }\r\n    }\r\n    */\r\n    // useEffect(() => {\r\n    //     // // See if a save state is stored in local memory\r\n    //     // const tempList = JSON.parse(localStorage.getItem('messagingList'));\r\n    //     // console.log(tempList);\r\n    //     // if (tempList !== '' && tempList !== null) {\r\n    //     //     setList(tempList);\r\n    //     //     setFirstMessage(false);\r\n    //     //     setDisplayLoaded(true);\r\n    //     //     setTimeout(() => {\r\n    //     //         setDisplayState(3);\r\n    //     //         setIsListSplit(true);\r\n    //     //     }, 1000);\r\n    //     // } else {\r\n    //     //     setDisplayState(1);\r\n    //     // }\r\n    //     setDisplayState(1);\r\n\r\n    // }, []);\r\n\r\n    const handleSplit = () => {\r\n        let name = user;\r\n        let tempMessageList = messageList;\r\n        let start = 0;\r\n        let end = 0;\r\n        switch (name) {\r\n            case (\"justin\") :\r\n                start = 0;\r\n                end = Math.floor(messageList.length / 3);\r\n                break;\r\n            case (\"eric\") :\r\n                if (messageList.length % 3 !== 0) {\r\n                    start = Math.ceil(messageList.length / 3)\r\n                } else {\r\n                    start = (messageList.length / 3) + 1;\r\n                }\r\n                end = Math.floor(2 * messageList.length / 3);\r\n                break;\r\n            case (\"omar\"):\r\n                if (messageList.length % 3 !== 0) {\r\n                    start = Math.ceil(2 * messageList.length / 3)\r\n                } else {\r\n                    start = (2 * messageList.length / 3) + 1;\r\n                }\r\n                end = messageList.length - 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(\"start:\" ,start);\r\n        console.log(\"end:\" ,end);\r\n        tempMessageList = messageList.slice(start, end+1);\r\n        console.log(\"splice: \",messageList.slice(start, end+1));\r\n        setMessageList(messageList.slice(start, end+1));\r\n        console.log(\"Message List: \",messageList);\r\n        setDisplayLoaded(true);\r\n    }\r\n\r\n    const handleResetSite = () => {\r\n        // Reset localStorage and displayState\r\n        localStorage.removeItem('messagingList');\r\n        setDisplayState(999);\r\n    }\r\n\r\n\r\n    // Display States:\r\n    // 0: null page (used only for testing)\r\n    // 1: login page\r\n    // 2: job selection\r\n    // 3: message selection\r\n    // 4: spreadsheet upload\r\n    // 5: user settings (admin only)\r\n    console.log(\"Displaystate: \",displayState);\r\n    if (displayState === 0) {\r\n        <div className = \"NightModeTesting\">\r\n\r\n        </div>\r\n    } else if (displayState === 1) {\r\n        return (<LoginPage user={user} setUser={setUser} setDisplayState={setDisplayState} setIsListSplit={setIsListSplit}/>)\r\n        // return (<div> Hello World </div>)\r\n        // return(<Header name={\"Justin\"}/>);\r\n    } else if (displayState >= 2) {\r\n        return (\r\n            <div className = \"FullSiteDisplay\">\r\n                <Header name={user} setDisplay={setDisplayState}/>\r\n                {displayState === 2\r\n                ? <EditMessage longMessage={longMessage} setMessageContents={setMessageContents} setLongMessage={setLongMessage} displayImageInput={displayImageInput} setImageURL={setImageURL} imageURL={imageURL} setDisplayImageInput={setDisplayImageInput} messageContents={messageContents} setDisplayState = {setDisplayState}/>\r\n                :displayState === 3\r\n                ? <SendMessages list = {list} displayLoaded = {displayLoaded} setDisplayState = {setDisplayState} setList = {setList} messageList = {messageList}/>\r\n                : displayState === 4\r\n                ? <div className = \"page\">\r\n                    <div className = \"finishBox\">\r\n                        <h2>Done sending messages</h2>\r\n                        <button onClick = {() => handleResetSite()}> Reset </button>\r\n                    </div>\r\n                </div>\r\n                :displayState === 5\r\n                ? <SelectJobPage setDisplayState = {setDisplayState}/>\r\n                : displayState === 6\r\n                ? <UploadSpreadsheetPage setDisplayState = {setDisplayState}/>\r\n                :displayState === 7\r\n                ? <JobSettings setDisplayState = {setDisplayState}/>\r\n                : <div />     \r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n}","import { MessagingSite } from \"./components/Webpage\";\r\n\r\nfunction App() {\r\n    console.log(\"Hello World\");\r\n    return (\r\n        <MessagingSite />\r\n    )\r\n} \r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import ('web-vitals').then (({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReeactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReeactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}